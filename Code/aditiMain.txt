//
//  main.cpp
//  COMP4300_A1
//
//  Created by Asfand Tareen on 2019-09-23.
//  Copyright Â© 2019 Asfand Tareen. All rights reserved.
//
#include <SFML/Graphics.hpp>
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <memory>

int main(int argc, char * argv[])
{
    // create a new window of size 400 by 400 pixels
    // top-left of the window is (0,0) and bottom-right is (w,h)
    //const int wWidth = 640;
    //const int wHeight = 480;
   // sf::RenderWindow window(sf::VideoMode(wWidth, wHeight), "SFML works!");
    //new window

    int wWidth = 0;
    int wHeight = 0;
    //vector of shapes
    std::vector<std::shared_ptr<sf::Shape>> shapes;
    //vector names of shapes
    // Change
    std::vector<std::string> nameShape;
    //vetr shape soeeds
    // TOASK: Purpose of std::_Adjust_manually_vector_aligned?
    // std::_Adjust_manually_vector_aligned<sf::Vector2f> shapeSpeed;
    std::vector<sf::Vector2f> shapeSpeed;
    
    // sf Font class
    sf::Font font;
    std::string token, name;
    // TOSUGGEST: Shouldn't fontSize be float, no?
    // int fontSize r, g, b, rfont, gfont, bfont;

    int fontSize, r, g, b, rfont, gfont, bfont;
    float positionx, positiony, sWidth, sHeight, radius, sx, sy;

    // TODO: Original Code
    //open file for reading
    //std::ifstream infile("C:/Users/Aditi/Documents/Courses/fall 2019/cs4300/assignment/COMP4300_A1/bin/config.txt");
    
    // Loading configuration file into ifstream
    std::ifstream infile("config.txt");
    

    while (infile.good()) {

        infile >> token;
        // Check for Line type e.g Circle etc.
        if (token == "Window")
        {
            infile >> wWidth >> wHeight;
        }
        else if (token == "Font")
        {
            // TOCORRECT: fontSize is mispelled
            // infile >> name >> fontsize >> r >> g >> b;
            infile >> name >> fontSize >> r >> g >> b;
            // TOSUGGEST: Declaring r, g, b as global variables is dangerous.
            rfont = r;
            gfont = g;
            bfont = b;
            
            // Load font
            // TODO: change back to name
            if (!font.loadFromFile("arial.ttf"))
            {
                //an error message for font not loading
                std::cerr << "Could not load the font !\n"; //if file doesnt load then we will exit console
                exit(-1);
            }
            
        }
        else if (token == "Rectangle")
        {
           // TOSUGGEST: using r, g, b as global variables across multiple shapes is unsafe
            infile >> name >> positionx >> positiony >> sx >> sy >> r >> g >> b >> sWidth >> sHeight;
            // Adding name of shape to name vector
            nameShape.push_back(name);
            // Adding shape properties in Vector2f class
            shapeSpeed.push_back(sf::Vector2f(sx, sy));
            /* std::make_shared: Allocates and constructs an object of type T passing args to its constructor, and returns an object of type shared_ptr<T> that owns and stores a pointer to it (with a use count of 1). This function uses ::new to allocate storage for the object.
             */
            // shape variable contains a pointer??
            auto shape = std::make_shared<sf::RectangleShape>(sf::Vector2f(sWidth, sHeight));
            
            /*
             '->' is to access a member function or member variable of an object through a pointer, as opposed to a regular variable or reference.

             For example: with a regular variable or reference, you use the . operator to access member functions or member variables.
             */
            // Pass shape pointer to
            // shape -> setFilledColor(sf::Color::Color(r, g, b)); // setFilledColor function doesn't exist
            // sf::Color::Color(r,g,b) is contructor call not a type.
            shape -> setFillColor(sf::Color(r, g, b));
            shape -> setPosition(positionx, positiony);
            shapes.push_back(shape);
        }
        else if (token == "Circle")
        {
            infile >> name >> positionx >> positiony >> sx >> sy >> r >> g >> b >> sWidth >> sHeight;
            nameShape.push_back(name);
            shapeSpeed.push_back(sf::Vector2f(sx, sy));
            auto shape = std::make_shared<sf::RectangleShape>(sf::Vector2f(sWidth, sHeight));
            // TOCORRECT
            // no method called setFilledColor
            // shape->setFilledColor(sf::Color::Color(r, g, b));
            // Error: Qualified reference to 'Color' is a constructor name rather than a type in this context, thus we replace it with sf:Color(r,g,b)
            shape->setFillColor(sf::Color(r, g, b));
            shape->setPosition(positionx, positiony);
            shapes.push_back(shape);
        }

    }

    // create a new window size of 400 x 400
    // TOCORRECT
    // sf::RenderWindow window(sf::VideoMode(wWidth, wHeight), "SFML works!") // semi-colon missing
    sf::RenderWindow window(sf::VideoMode(wWidth, wHeight), "SFML works!");

    //sf text for the shapes
    sf::Text text;

    text.setFont(font);
    text.setCharacterSize(fontSize);
    // TOCORRECT
    // Same issue as before
    // text.setFilledColor(sf::Color(255, 255, 255));
    text.setFillColor(sf::Color(255, 255, 255));


        
    // let's make a shape that we will draw to the screen
    
    sf::CircleShape circle(50);             // create a circle shape with radius 50
    circle.setFillColor(sf::Color::Green);  // set the circle color to green
    circle.setPosition(300.0f, 300.0f);     // set the top-left position of the circle
    float circleMoveSpeed = 0.01f;          // we will use this to move the circle later

    // let's load a font so we can display some text
    sf::Font arial;

    // attempt to load the font from a file
    if (!arial.loadFromFile("arial.ttf"))
    {
        // if we can't load the font, print an error to the error console and exit
        std::cerr << "Could not load font!\n";
        exit(-1);
    }

    // set up the text object that will be drawn to the screen
    // TOCORRECT: Error: Redefining text variable, rename it
    // sf::Text text("Sample Text", arial, 24); // Renaming to text2
    sf::Text text2("Sample Text", arial, 24);

    // position the top-left corner of the text so that the text aligns on the bottom
    // text character size is in pixels, so move the text up  from the bottom by its height
    text2.setPosition(0, wHeight - (float)text2.getCharacterSize());

    // main loop - continues for each frame while window is open
    while (window.isOpen())
    =   1
        // event handling
        sf::Event event;
        while (window.pollEvent(event))
        {
            // this event triggers when the window is closed
            if (event.type == sf::Event::Closed)
            {
                window.close();
            }

            // this event is triggered when a key is pressed
            if (event.type == sf::Event::KeyPressed)
            {
                // print the key that was pressed to the console
                std::cout << "Key pressed with code = " << event.key.code << "\n";

                // example, what happens when x is pressed
                if (event.key.code == sf::Keyboard::X)
                {
                    // reverse the direction of the circle on the screen
                   // circleMoveSpeed *= -1.0f;
                }
            }
        }

        // basic animation - move the each frame if it's still in frame
        circle.setPosition(circle.getPosition().x - circleMoveSpeed, circle.getPosition().y - circleMoveSpeed);
        
        // basic rendering function calls
        // clear the window of anything previously drawn
        window.clear();
        
        for (std::size_t i = 0; i < shapes.size(); i++)
        {
            // TOCORRECT
            // if (shapes[i]-> getPosition().x <= 0 || shapes[i]->getPosition().x + shapes[i]-> getLoacalBounds().width >= wWidth)
            if (shapes[i]-> getPosition().x <= 0 || shapes[i]->getPosition().x + shapes[i]-> getLocalBounds().width >= wWidth)
            {
                // TOCORRECT
                // speed variable is not declared
                // speeds[i].x *= -1.0f;
                shapeSpeed[i].x *= -1.0f;
            }
            // TOCORRECT: Spell issue
            if (shapes[i]->getPosition().y <= 0 || shapes[i]->getPosition().y + shapes[i]->getLocalBounds().height >= wHeight)
            {
                // TOCORRECT: same as above
                shapeSpeed[i].y *= -1.0f;
            }
            // TOCORRECT: same as above
            shapes[i]->setPosition(shapes[i]->getPosition().x - shapeSpeed[i].x, shapes[i]->getPosition().y - shapeSpeed[i].y);
            
            // Need to dereference the pointer
            window.draw(*shapes[i]);
            // draw the shapes
            text2.setString(nameShape[i]);
            
            // text2.setPosition(shapes[i] -> getPosition().x + (shapes[i] -> getLocalBounds().width/2) - (text2.getLocalBounds()), 0);
            
        }
        /* TOCORRECT
            - variable 'i' is not decalred out of the loop
            - possible logic issue
            window.draw(shapes[i]);    // draw the shapes
            text2.setString(names[i]);
            // TOCORRECT: spell issue and semi-colon missing
            // tsxt.setPosition(shapes[i]->getPosition().x + (shapes[i]->getLocalBounds().width/2)-(text2.getLocalBound))
            text2.setPosition(shapes[i]->getPosition().x + (shapes[i]->getLocalBounds().width/2)-(text2.getLocalBound));         */
        
        // window.draw(shapes[i]);    // draw the shapes
        // text2.setString(names[i]);
        // TOCORRECT: spell issue and semi-colon missing
        // tsxt.setPosition(shapes[i]->getPosition().x + (shapes[i]->getLocalBounds().width/2)-(text2.getLocalBound))
        // text2.setPosition(shapes[i]->getPosition().x + (shapes[i]->getLocalBounds().width/2)-(text2.getLocalBound));
        window.draw(text2);      // draw the text
        window.display();       // call the window display function
    }

    return 0;
}
